-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Execute Node.js scripts in Haskell.
--   
--   Execute Node.js scripts in Haskell.
@package inline-js
@version 0.0.1

module Language.JavaScript.Inline.Splices
js :: QuasiQuoter

module Language.JavaScript.Inline.Configure
data ConfigureOptions
ConfigureOptions :: FilePath -> [String] -> Version -> [String] -> [(String, String)] -> ConfigureOptions
[jsbitsPath] :: ConfigureOptions -> FilePath
[commands] :: ConfigureOptions -> [String]
[minNodeVer] :: ConfigureOptions -> Version
[nodeArgs] :: ConfigureOptions -> [String]
[additionalEnv] :: ConfigureOptions -> [(String, String)]
defaultConfigureOptions :: ConfigureOptions
configureOptionsQ :: Q Exp
defaultMainWithInlineJS :: ConfigureOptions -> IO ()
defaultUserHooksWithInlineJS :: ConfigureOptions -> UserHooks
withInlineJS :: ConfigureOptions -> UserHooks -> UserHooks
instance Language.Haskell.TH.Syntax.Lift Language.JavaScript.Inline.Configure.ConfigureOptions
instance Data.Binary.Class.Binary Language.JavaScript.Inline.Configure.ConfigureOptions
instance GHC.Generics.Generic Language.JavaScript.Inline.Configure.ConfigureOptions
instance GHC.Show.Show Language.JavaScript.Inline.Configure.ConfigureOptions
instance Language.Haskell.TH.Syntax.Lift Data.Version.Version

module Language.JavaScript.Inline.Session
type JSSource = Text
data Session
data EvalException
EvalFailed :: JSSource -> Value -> EvalException
[$sel:code:EvalFailed] :: EvalException -> JSSource
[$sel:error:EvalFailed] :: EvalException -> Value
ResultDecodingFailed :: JSSource -> String -> EvalException
[$sel:code:EvalFailed] :: EvalException -> JSSource
[$sel:decodingError:EvalFailed] :: EvalException -> String
eval :: Session -> forall m a. (MonadIO m, FromJSON a) => JSSource -> m a
closeSession :: Session -> forall m. MonadIO m => m ()
newSession :: MonadIO m => ConfigureOptions -> m Session

module Language.JavaScript.Inline.MonadJS
type JSSource = Text
class MonadJS m
eval :: (MonadJS m, FromJSON a) => JSSource -> m a
data JST m a
runJST :: MonadUnliftIO m => ConfigureOptions -> JST m a -> m a
instance GHC.Base.Functor m => GHC.Base.Functor (Language.JavaScript.Inline.MonadJS.JST m)
instance GHC.Base.Applicative m => GHC.Base.Applicative (Language.JavaScript.Inline.MonadJS.JST m)
instance GHC.Base.Monad m => GHC.Base.Monad (Language.JavaScript.Inline.MonadJS.JST m)
instance Control.Monad.IO.Class.MonadIO m => Control.Monad.IO.Class.MonadIO (Language.JavaScript.Inline.MonadJS.JST m)
instance Control.Monad.Fail.MonadFail m => Control.Monad.Fail.MonadFail (Language.JavaScript.Inline.MonadJS.JST m)
instance Control.Monad.Trans.Class.MonadTrans Language.JavaScript.Inline.MonadJS.JST
instance Control.Monad.Fix.MonadFix m => Control.Monad.Fix.MonadFix (Language.JavaScript.Inline.MonadJS.JST m)
instance Control.Monad.Zip.MonadZip m => Control.Monad.Zip.MonadZip (Language.JavaScript.Inline.MonadJS.JST m)
instance GHC.Base.Alternative m => GHC.Base.Alternative (Language.JavaScript.Inline.MonadJS.JST m)
instance GHC.Base.MonadPlus m => GHC.Base.MonadPlus (Language.JavaScript.Inline.MonadJS.JST m)
instance Control.Monad.Cont.Class.MonadCont m => Control.Monad.Cont.Class.MonadCont (Language.JavaScript.Inline.MonadJS.JST m)
instance Control.Monad.Error.Class.MonadError e m => Control.Monad.Error.Class.MonadError e (Language.JavaScript.Inline.MonadJS.JST m)
instance GHC.Base.Monad m => Control.Monad.Reader.Class.MonadReader Language.JavaScript.Inline.Session.Session (Language.JavaScript.Inline.MonadJS.JST m)
instance Control.Monad.State.Class.MonadState s m => Control.Monad.State.Class.MonadState s (Language.JavaScript.Inline.MonadJS.JST m)
instance Control.Monad.Writer.Class.MonadWriter w m => Control.Monad.Writer.Class.MonadWriter w (Language.JavaScript.Inline.MonadJS.JST m)
instance Control.Monad.IO.Unlift.MonadUnliftIO m => Control.Monad.IO.Unlift.MonadUnliftIO (Language.JavaScript.Inline.MonadJS.JST m)
instance Control.Monad.IO.Class.MonadIO m => Language.JavaScript.Inline.MonadJS.MonadJS (Language.JavaScript.Inline.MonadJS.JST m)

module Language.JavaScript.Inline.Import
js :: Q [Dec] -> Q [Dec]

module Language.JavaScript.Inline
configureOptionsQ :: Q Exp
